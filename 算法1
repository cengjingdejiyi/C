/**********************基础算法*****************************/
/*
差分
b[i] = a[i] - a[i - 1];
a[i] = a[i - 1] + b[i];
b[l] += c;
b[r + 1] -= c;
*/

/*
离散化
vector<int> vec; 
sort(vec.begin(), vec.end());
vec.erase(unique(vec.begin(), vec.end()), vec.end());
int getid(int x) {
    //返回下标从1开始
    return lower_bound(vec.begin(),vec.end(), x) - vec.begin() + 1;
} 
*/
/**********************基础算法*****************************/


/**********************图论*****************************/
/*
链式前向星 
int h[N], e[M], ne[M], tot, w[N];
void add(int a, int b, int c) {
    tot++;
    e[tot] = b;
    w[tot] = c;
    ne[tot] = h[a];
    h[a] = tot;
}
for (int i = h[u]; i; i = ne[i]) {
    int v = e[i];
    ......
}
*/

/*
单源最短路：堆优化的dijkstra
int h[N], e[M], ne[M], tot, w[N];
void add(int a, int b, int c) {
    tot++;
    e[tot] = b;
    w[tot] = c;
    ne[tot] = h[a];
    h[a] = tot;
}
int dist[N];
bool st[N];
int dijkstra(int s){
	memset(dist, INF, sizeof dist);
	dist[s] = 0;
	
	priority_queue<PII, vector<PII>, greater<PII>> q;
	q.push({0,s});
	while(q.size()){
        auto now = q.top();
        q.pop();
		
		int u = now.second;
        int t = now.first;
		
		if(st[u]) continue;
		st[u]=true;
		
		for(int i = h[u]; i; i = ne[i]){
			int v=e[i];
			
			if(dist[v] > t + w[i]){
				dist[v] = t + w[i];
				q.push({dist[v], v});
			}
		}
	}
	
	if(dist[n] == INF) return -1;
	return dist[n];
}
*/

/*
处理负边权和判断负环：bellmanford
int d[N];
bool bellmanford(int s) {
    memset(d, INF, sizeof d);
    d[s] = 0;
    bool flag; //判断是否松弛
    for (int i = 1; i <= n; i++) {
        flag = false;
        for (int u = 1; u <= n; u++) {
            if (d[u] == INF) continue;
            for (int i = h[u]; i; i = ne[i]) {
                int v = e[i];
                if (d[v] > d[u] + w[i]) {
                    d[v] = d[u] + w[i];
                    flag = true;
                }
            }
        }
        if (!flag) break;
    }

    return flag; // 第n轮 flag == true 则有环
}
*/

/*
spfa:bellmanford的优化
int d[N], cnt[N], st[N];
queue<int> q;
bool spfa(int s) {
    memset(d, INF, sizeof d);
    d[s] = 0;

    st[s] = 1;
    q.push(s);
    while (q.size()) {
        int u = q.front();
        q.pop();
        st[u] = 0;
        
        for (int i = h[u]; i; i = ne[i]) {
            int v = e[i];
            if (d[v] > d[u] + w[i]) {
                d[v] = d[u] + w[i];
                cnt[v] = cnt[u] + 1;
                if (cnt[v] >= n) return false;
                if (!st[v]) {
                    q.push(v);
                    st[v] = 1;
                }
            }
        }
    }
    return true;
}
*/

/*
全源最短路：floyd，插点法
void floyd() {
    for (int k = 1; k <= n; k++) {
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                d[i][j] = min(d[i][j], d[i][k] + d[k][j]);
            }
        }
    }
}
*/

/*
最小生成树(MST)：kruskal
struct edge{
    int u, v, w;
    bool operator <(const edge &t) const{
        return w < t.w;
    }
}e[N];
int fa[N], ans, cnt;//ans为树的最小边权值和
bool kruskal() {
    sort(e, e + m);
    for (int i = 1; i <= n; i++) fa[i] = i;
    for (int i = 0; i < m; i++) {
        int x = find(e[i].u);
        int y = find(e[i].v);
        if (x != y) {
            fa[x] = y;
            ans += e[i].w;
            cnt++;
        }
    }
    return cnt == n - 1;
}
*/

/*
倍增法求lca
int dep[N], fa[N][20];//dep[u]:u点深度  fa[u][i]:u点向上跳2^i层的祖先结点
void dfs(int u, int father) {//dfs一遍，创建ST表
    dep[u] = dep[father] + 1;
    fa[u][0] = father;
    for (int i = 1; i <= 19; i++) {
        fa[u][i] = fa[fa[u][i - 1]][i - 1];
    }

    for (int i = h[u]; i; i = ne[i]) {
        int v = e[i];
        if (v != father) dfs(v, u);
    }
}
int lca(int u, int v) {
    if (dep[u] < dep[v]) swap(u, v);

    //先跳到同一层
    for (int i = 19; i >= 0; i--) {
        if (dep[fa[u][i]] >= dep[v]) u = fa[u][i];
    }
    if (u == v) return v;

    //再跳到lca的下一层
    for (int i = 19; i >= 0; i--) {
        if (fa[u][i] != fa[v][i]) {
            u = fa[u][i], v = fa[v][i];
        }
    }
    return fa[u][0];//上一层就是lca
}
*/

/*
树上点前缀和：d(x, y) = s[x] + s[y] - s[lca] - s[fa[lca]]
luogu P4427 [BJOI2018] 求和
mi[0] = 1;
dep[0] = -1; 
int s[N];
void dfs1(int u, int father) {
    for (int i = h[u]; i; i = ne[i]) {
        int v = e[i];
        if (v == father) continue;
        for (int j = 1; j <= 50; j++) 
            mi[j] = mi[j - 1] * dep[v] % mod;
        for (int j = 1; j <= 50; j++)
            s[v][j] = (mi[j] + s[u][j]) % mod;
        dfs1(v, u);
    }
}
void solve() {
    dfs(1, 0);
    dfs1(1, 0);
    for (int i = 1; i <= m; i++) {
        int u, v, k; cin >> u >> v >> k;
        int l = lca(u, v);
        int res = (s[u][k] + s[v][k] - s[l][k] - s[fa[l][0]][k] + 2 * mod) % mod;
        cout << res << endl;
    }
}
*/

/*
树上边前缀和：d(x, y) = s[x] + s[y] - 2 * s[lca]
int s[N];
void dfs1(int u, int fa) {
    for (int i = h[u]; i; i = ne[i]) {
        int v = e[i];
        if (v == fa) continue;
        s[v] = s[u] + w[i];
        dfs1(v, u);
    }
}
*/

/*
树上点差分：(x, y) 上的点+1: d[x] + 1, d[y] + 1, d[lca] - 1,d[fa[lca]] - 1
int power[N];
void dfs2(int u, int fa) {//根据差分更新点权值
    for (int i = h[u]; i; i = ne[i]) {
        int v = e[i];
        if (v == fa) continue;
        dfs2(v, u);
        power[u] += power[v];
    }
}
*/

/*
树上边差分：(x, y) 上的边+1：d[x] + 1, d[y] + 1, d[lca] - 2
int power[N];
int dfs2(int u, int fa) {//根据差分更新边权值
    int s = power[u];
    for (int i = h[u]; i; i = ne[i]) {
        int v = e[i];
        if (v == fa) continue;
        int t = dfs2(v, u);
        w[i] += t;
        s += t;
    }
    return s;
}
*/

/*
路径边权最值：kruskal重构树
路径边权最大值：
luogu P1967 [NOIP2013 提高组] 货车运输
int n, m, q;
struct edge{
    int u, v, w;
    bool operator <(const edge &t) const{
        return w > t.w;
    }
}E[N];
int f[M];
int find(int x) {
    return x == f[x]? x : f[x] = find(f[x]);
}
vector<int> e[M];
int val[M];
void kruskal() {
    sort(E + 1, E + m + 1);
    for (int i = 1; i < 2 * n; i++) f[i] = i;
    int idx = n;
    for (int i = 1; i <= m; i++) {
        int u = E[i].u, v = E[i].v, w = E[i].w;
        u = find(u), v = find(v);
        if (u == v) continue;
        val[++idx] = w;
        e[idx].push_back(u);
        e[idx].push_back(v);
        f[u] = f[v] = idx;
    }
}

int dep[N], fa[N][22];
int col[M], cols;
void dfs(int u, int father) {
    col[u] = cols;
    dep[u] = dep[father] + 1;
    fa[u][0] = father;
    for (int i = 1; i <= 20; i++) {
        fa[u][i] = fa[fa[u][i - 1]][i - 1];
    }

    for (auto &v: e[u]) {
        dfs(v, u);
    }
}
int lca(int u, int v) {
    if (dep[u] < dep[v]) swap(u, v);

    for (int i = 20; i >= 0; i--) {
        if (dep[fa[u][i]] >= dep[v]) u = fa[u][i];
    }
    if (u == v) return u;

    for (int i = 20; i >= 0; i--) {
        if (fa[u][i] != fa[v][i]) {
            u = fa[u][i], v = fa[v][i];
        }
    }
    return fa[u][0];
}
void solve()
{
    cin >> n >> m >> q;
    for (int i = 1; i <= m; i++) {
        cin >> E[i].u >> E[i].v >> E[i].w;
    }
    kruskal();
    for (int i = 1; i < 2 * n; i++) {
        if (f[i] == i) {
            ++cols;
            dfs(i, 0);
        }
    }
    while (q--) {
        int x, y; cin >> x >> y;
        if (col[x] != col[y]) cout << -1 << endl;
        else {
            int l = lca(x, y);
            cout << val[l] << endl;
        }
    }
}
*/
/**********************图论*****************************/


/**********************数据结构*****************************/
/* 
并查集 
int fa[N];
int find (int x) {
    if (x != fa[x]) return fa[x] = find(fa[x]);

    return fa[x];
}
*/ 

/*
树状数组
int c[N];
int lowbit(int i) {
	return i & -i;
}

void add(int i,int k) {
	for ( ; i <= n; i += lowbit(i)) 
	    c[i] += k;
}

int sum(int i) {
	int s = 0;
	for ( ; i; i -= lowbit(i)) 
	    s += c[i];
	    
	return s;
}
*/

/*
线段树 
#define lc(x) (x << 1)
#define rc(x) (x << 1 | 1)
struct node{
    int l, r, s, lz;
}tr[N * 4];

void pushup(node &u, node &l, node &r) {
    u.s = l.s + r.s;
}
void pushup(int u) {
    pushup(tr[u], tr[lc(u)], tr[rc(u)]);
}

void pushdown(node &u, node &l, node &r) {
    if (u.lz) {
        l.s += (l.r - l.l + 1) * u.lz;
        r.s += (r.r - r.l + 1) * u.lz;
        l.lz += u.lz;
        r.lz += u.lz;
        u.lz = 0;
    }
}
void pushdown(int u) {
    pushdown(tr[u], tr[lc(u)], tr[rc(u)]);
}

void build(int u, int l, int r) {
    tr[u] = {l, r, 0, 0};
    if (l == r) {
        tr[u].s = a[l];
        return ;
    }

    int mid = l + r >> 1;
    build(lc(u), l, mid);
    build(rc(u), mid + 1, r);
    pushup(u);
}

void add(int u, int l, int r, int w) {
    if (tr[u].l >= l && tr[u].r <= r) {
        tr[u].s += (tr[u].r - tr[u].l + 1) * w;
        tr[u].lz += w;
        return ;
    }
    
    pushdown(u);
    int mid = tr[u].l + tr[u].r >> 1;

    if (l <= mid) add(lc(u), l, r, w);
    if (r > mid) add(rc(u), l, r, w);
    pushup(u);
}

node query(int u, int l, int r) {
    if (tr[u].l >= l && tr[u].r <= r) { 
        return tr[u];
    }

    pushdown(u);
    int mid = tr[u].l + tr[u].r >> 1;

    if (r <= mid) return query(lc(u), l, r);
    if (l > mid) return query(rc(u), l, r); 

    node a = query(lc(u), l, r);
    node b = query(rc(u), l, r);

    node res;
    pushup(res, a, b);

    return res;
}
*/

/*
ST表
int f[N][21];
void init() {
    for (int i = 1; i <= n; i++) f[i][0] = a[i];

    for (int j = 1; j <= 20; j++) {
        for (int i = 1; i + (1 << j) - 1 <= n; i++) {
            f[i][j] = f[i][j - 1] | f[i + (1 << (j - 1))][j - 1];
        }
    }
}
int query(int l, int r) {
    int k = log2(r - l + 1);
    return f[l][k] | f[r - (1 << k) + 1][k];
}
*/

/*
整除分块
int res = n * k;
for (int l = 1, r; l <= n; l = r + 1) {
    if (k / l == 0) break;
    r = min(k / (k / l), n);
    res -= (k / l) * (r - l + 1) * (l + r) / 2; 
}
*/
/**********************数据结构*****************************/


/**********************计算几何*****************************/
/*
点坐标表示
const double PI = acos(-1.0);
struct Point{ 
	double x, y; //横纵坐标
	Point(){}
	Point(double _x, double _y) {x = _x; y = _y;}
  	Point operator +(const Point &b) const {return Point(x + b.x, y + b.y);} //加
	Point operator -(const Point &b) const {return Point(x - b.x, y - b.y);} //减 
	double operator ^(const Point &b) const {return x * b.y - y * b.x;} //叉积 
	double operator *(const Point &b) const {return x * b.x + y * b.y;} //点积 
	void transXY(double B){ //求点旋转B弧度后的坐标(90度为π/2弧度)
		double tx = x,ty = y;
		x = tx * cos(B) - ty * sin(B); 
		y = tx * sin(B) + ty * cos(B);
	}
};
*/
/**********************计算几何*****************************/


/**********************数学*****************************/
/*
试除法判定质数
bool is_prime(int x){
    if(x<2) return false;
    
    for(int i=2;i<=x/i;i++)
        if(x%i==0) return false;
        
    return true;
}
*/

/*
线性筛
bool st[N];
int primes[N], cnt;
void init(int n) {
    for (int i = 2; i <= n; i++) {
        if (!st[i]) {
            primes[cnt++] = i;
        }
        for (int j = 0; primes[j] <= n / i; j++) {
            st[i * primes[j]] = true;
            if (i % primes[j] == 0) break;
        }
    }
}
*/

/*
试除法求约数
void get_divisors(int n)
{
    vector<int> res;
    for (int i = 1; i <= n / i; i++) {
        if (n % i == 0) {
            res.push_back(i);

            if (i != n / i) {  // 避免 i==n/i, 重复放入 （n是完全平方数）
                res.push_back(n / i);
            }
        }
    }

    sort(res.begin(), res.end());
    for (auto item : res) {
        cout << item << " ";
    }
    puts("");
}
*/

/*
公式法求欧拉函数
int phi(int x) {
    int res = x;

    for (int i = 2; i <= x / i; i++) {
        if (x % i == 0) {
            while (x % i == 0) x /= i;
            res = res / i * (i - 1);
        }
    }
    if (x > 1) res = res / x * (x - 1);

    return res;
}
*/

/*
筛法求欧拉函数
int primes[N], cnt;
int phi[N];
bool st[N];
void get_eulers(int n) {
    st[1] = true;
    phi[1] = 1;

    for (int i = 2; i <= n; i++) {
        if (!st[i]) {
            primes[cnt++] = i;
            phi[i] = i - 1;
        }
        for (int j = 0; primes[j] <= n / i; j++) {
            st[i * primes[j]] = true;
            if (i % primes[j] == 0) {
                phi[i * primes[j]] = phi[i] * primes[j];
                break;
            }
            phi[i * primes[j]] = phi[i] * (primes[j] - 1);
        }
    }
}
*/

/*
快速幂
int qmi(int a, int b, int p){
	a %= p;
	int res=1;
	while(b){
		if(b & 1) res = res * a % p;
		b >>= 1;
		a = a * a % p;
	}
	return res;
}
*/

/*
欧几里得算法
int gcd(int a, int b) {
    return b? gcd(b, a % b) : a;
}
*/

/*
扩展欧几里得算法：求 a * x + b * y = gcd(a, b)的一组整数解
int x, y;
int exgcd(int a, int b, int &x, int &y) {//返回gcd(a,b) 并求出解(引用带回)
    if (b == 0) {
        x = 1, y = 0;
        return a;
    }
    int x1, y1, d;
    d = exgcd(b, a % b, x1, y1);
    x = y1, y = x1 - a / b * y1;
    return d;
}
如果求不定方程：a * x + b * y = c的一组整数解
int d = exgcd(a, b, x, y);
if (c % d == 0) {
    x = c / d * x;
    y = c / d * y;
}
else {
    puts("none");
}
*/

/*
分数取余：乘法逆元
欧拉定理：a ^ φ(p) ≡ 1(mod p)
对于任意互质的a,p 恒成立。
欧拉定理用来求逆元用的是欧拉定理的一个推论：
a * (a ^ (φ(p) - 1)) ≡ 1(mod p)
仔细观察，a * b ≡ 1(mod p)，在这里的b不就是上面的a ^ (φ(p) - 1)吗？，所以求出a ^ (φ(p) - 1)就好了。

补充：其实如果p是质数的话，可以用费马小定理，与欧拉定理是完全一样的，费马小定理在p不是质数时，则只能用欧拉定理。
怎么弄呢？费马小定理 a ^ (p - 1) ≡ 1(mod p) p是质数，且a,p互质，
然后将上面的式子变一下，a * a ^ (p - 2) ≡ 1(mod p) ，
再变一下，a ^ (p - 2) ≡ a ^ -1 (mod p) ，然后求出a ^ (p - 2)就可以了。
然后再看一下欧拉定理，如果p是质数，φ(p) = p - 1，那么我们求a ^ (φ(p) - 1)，也就是求a ^ (p - 2)。和费马小定理是一样的。

因此，分数取余如下：
一般地， p为质数，则直接乘qmi(b, p - 2, p)
*/

/*
欧拉广义降幂：求 a ^ b % p
1. gcd(a, p) = 1: a ^ b % p = a ^ (b % φ(p))
2. gcd(a, p) != 1:
    若 b < φ(p): a ^ b % p = a ^ b
    若 b >= φ(p): a ^ b % p = a ^ (b % φ(p) + φ(p))
*/

/*
线性同余方程：a * x ≡ b (mod m) <=> a * x % m = b
当b = 1时，x 为 a 的乘法逆元
void solve() {
    int d = exgcd(a, m, x, y);
    if (b % d == 0) {
        res = 1ll * x * b / d % m;
    }
    else {
        puts("none");
    }
}
*/

/*
快速幂求组合数  O(n * log(p))
const int p = 1e9 + 7;
int fac[N], invfac[N];//fac为阶乘， invfac为阶乘的倒数
void init() {
    fac[0] = 1;
    invfac[0] = 1;
    for (int i = 1; i < N; i++) {
        fac[i] = fac[i - 1] * i % p;
        invfac[i] = invfac[i - 1] * qmi(i, p - 2, p) % p;
    }
}
*/

/*
卢卡斯定理求组合数 O(logp(n) * p) {
void init(int p) {
    fac[0] = invfac[0] = 1;
    for (int i = 1; i <= p; i++) {
        fac[i] = fac[i - 1] * i % p;
        invfac[i] = invfac[i - 1] * qmi(i, p - 2, p) % p;
    }
}
int getC(int n, int m, int p) {
    return fac[n] * invfac[m] * invfac[n - m] % p;
}
int lucas(int n, int m, int p) {
    if (!m) return 1;
    return lucas(n / p, m / p, p) * getC(n % p, m % p, p) % p;
}
*/

/*
博弈论：SG函数
SG(s1) ^ SG(s2) ^ SG(s3) ^ ... ^ SG(sn) != 0 先手win，先手lose
若区间为[a, b], SG(x) = (x % (a + b)) / b;
*/

/*
fft-快速傅里叶变换
const double PI = acos(-1.0);
struct Complex{
    double x, y;
    Complex(double _x = 0.0, double _y = 0.0) {
        x = _x, y = _y;
    }
    Complex operator +(const Complex &b) const{
        return Complex(x + b.x, y + b.y);
    }
    Complex operator -(const Complex &b) const{
        return Complex(x - b.x, y - b.y);
    }
    Complex operator *(const Complex &b) const{
        return Complex(x * b.x - y * b.y, x * b.y + y * b.x);
    }   
};
Complex A[N], B[N];
void change(Complex A[], int n) {
    int k;
    //0 和 最后一个不用反转
    for (int i = 1, j = n / 2; i < n - 1; i++) {
        if (i < j) swap(A[i], A[j]);// i < j 保证只交换一次

        // i 做正常的加1， j 做左反转类型的加1， 始终保持i和j是反转的
        k = n / 2;
        while (j >= k) {
            j -= k;
            k >>= 1;
        }
        if (j < k) j += k;
    }
}
void fft(Complex A[], int n, int op) {
    change(A, n);//位逆序变换（蝴蝶变换）
    for (int m = 2; m <= n; m <<= 1) {//枚举块宽
        Complex w1({cos(2 * PI / m), sin(2 * PI / m) * op});
        for (int i = 0; i < n; i += m) {//枚举块数
            Complex wk({1, 0});
            for (int j = 0; j < m / 2; j++) {//枚举半块
                Complex x = A[i + j], y = A[i + j + m / 2] * wk;
                A[i + j] = x + y;
                A[i + j + m / 2] = x - y;
                wk = wk * w1;
            }
        }
    }
}
char a[N], b[N];
int ans[N];
void solve() {
    scanf("%s%s", a, b);
    int n = strlen(a) - 1, m = strlen(b) - 1;
    for (int i = 0; i <= n; i++) A[i].x = a[n - i] - '0';
    for (int i = 0; i <= m; i++) B[i].x = b[m - i] - '0';
    for (m = n + m, n = 1; n <= m; n <<= 1) ;
    fft(A, n, 1), fft(B, n, 1);
    for (int i = 0; i < n; i++) A[i] = A[i] * B[i];
    fft(A, n, -1);
    int k = 0;
    for (int i = 0, t = 0; i < n || t; i++) {
        t += A[i].x / n + 0.5;
        ans[k++] = t % 10;
        t /= 10;
    }
    while (k > 1 && !ans[k - 1]) k--;
    for (int i = k - 1; i >= 0; i--)
	    printf("%d", ans[i]);
}
*/
/**********************数学*****************************/


#include<bits/stdc++.h>
using namespace std;
#define endl '\n'
#define int long long
#define PII pair<int, int>
#define INF 0x3f3f3f3f
#define eps 1e-8
const int N = 1e3 + 10;
const int M = N * 2;
/***************************************************/

int h[N], ne[M], tot, e[M];
void add(int a, int b) {
    tot++;
    e[tot] = b;
    ne[tot] = h[a];
    h[a] = tot;
}

int n;
int a[N];

bool st[N];

int res;

map<int, int> mp[N];
void dfs(int u, int father) {
    st[u] = true;

    for (int i = h[u]; i; i = ne[i]) {
        int v = e[i];

        if (v == father || st[v]) continue;

        dfs(v, u);

        for (auto [x, t]: mp[v]) {
            mp[u][x] += t;
        }
    }
    mp[u][a[u]]++;

    int maxv = 0;
    int sum = 0;
    set<int> s;
    for (auto [x, t]: mp[u]) {
        if (maxv < t) {
            s.clear();
            s.insert(x);
            maxv = t;
        }
        else if (maxv == t) {
            s.insert(x);
        }
        sum ^= x;
    }

    for (auto x: s) {
        sum ^= x;
    }

    res = max(res, sum);
}
void solve() {
    cin >> n;
    for (int i = 1; i <= n; i++) cin >> a[i];

    for (int i = 1; i < n; i++) {
        int u, v; cin >> u >> v;
        add(u, v);
        add(v, u);
    }

    dfs(1, 0);

    cout << res << endl;
}

signed main() 
{
    ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);

    solve();

    return 0;
}
